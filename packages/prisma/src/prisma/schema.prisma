generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FCMToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("FCMTokens")
}

model Friendship {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  friendId  String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  friend    User     @relation("Friendships_friendIdToUsers", fields: [friendId], references: [id], onDelete: Cascade)
  user      User     @relation("Friendships_userIdToUsers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId], map: "Friendships_userId_friendId_uk")
  @@map("Friendships")
}

model Image {
  id            String             @id @default(uuid()) @db.Uuid
  userId        String?            @db.Uuid
  location      String?            @db.VarChar(255)
  key           String?            @db.VarChar(255)
  json          Json?
  createdAt     DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime           @updatedAt @db.Timestamptz(6)
  user          User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  recipeImages  RecipeImage[]
  profileImages UserProfileImage[]

  @@index([userId], map: "images_user_id")
  @@map("Images")
}

model Label {
  id           String        @id @default(uuid()) @db.Uuid
  userId       String        @db.Uuid
  labelGroupId String?       @db.Uuid
  title        String        @db.VarChar(255)
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(6)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  labelGroup   LabelGroup?   @relation(fields: [labelGroupId], references: [id], onDelete: SetNull)
  profileItems ProfileItem[]
  recipeLabels RecipeLabel[]

  @@unique([userId, title], map: "Labels_userId_title_uk")
  @@index([userId], map: "labels_user_id")
  @@index([labelGroupId], map: "labels_label_group_id")
  @@map("Labels")
}

model LabelGroup {
  id                 String   @id @default(uuid()) @db.Uuid
  userId             String   @db.Uuid
  title              String   @db.VarChar(255)
  warnWhenNotPresent Boolean
  createdAt          DateTime @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime @updatedAt @db.Timestamptz(6)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  labels             Label[]

  @@unique([userId, title], map: "LabelGroups_userId_title_uk")
  @@index([userId], map: "labelgroups_user_id")
  @@map("LabelGroups")
}

model MealPlanItem {
  id                String             @id @default(uuid()) @db.Uuid
  userId            String             @db.Uuid
  mealPlanId        String             @db.Uuid
  recipeId          String?            @db.Uuid
  title             String?
  scheduled         DateTime?          @db.Timestamptz(6)
  meal              String?            @db.VarChar(255)
  createdAt         DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime           @updatedAt @db.Timestamptz(6)
  mealPlan          MealPlan           @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  recipe            Recipe?            @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  shoppingListItems ShoppingListItem[]

  @@index([mealPlanId], map: "meal_plan_items_meal_plan_id")
  @@index([recipeId], map: "meal_plan_items_recipe_id")
  @@map("MealPlanItems")
}

model MealPlanCollaborator {
  id         String   @id @default(uuid()) @db.Uuid
  mealPlanId String   @db.Uuid
  userId     String   @db.Uuid
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([mealPlanId, userId])
  @@map("MealPlan_Collaborators")
}

model MealPlan {
  id                String                 @id @default(uuid()) @db.Uuid
  userId            String                 @db.Uuid
  title             String?
  createdAt         DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime               @updatedAt @db.Timestamptz(6)
  items             MealPlanItem[]
  collaboratorUsers MealPlanCollaborator[]
  user              User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("MealPlans")
}

model Message {
  id               String   @id @default(uuid()) @db.Uuid
  fromUserId       String   @db.Uuid
  toUserId         String   @db.Uuid
  recipeId         String?  @db.Uuid
  originalRecipeId String?  @db.Uuid
  body             String?
  type             String?  @db.VarChar(255)
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @db.Timestamptz(6)
  fromUser         User     @relation("Messages_fromUserIdToUsers", fields: [fromUserId], references: [id], onDelete: Cascade)
  originalRecipe   Recipe?  @relation("Messages_originalRecipeIdToRecipes", fields: [originalRecipeId], references: [id])
  recipe           Recipe?  @relation("Messages_recipeIdToRecipes", fields: [recipeId], references: [id])
  toUser           User     @relation("Messages_toUserIdToUsers", fields: [toUserId], references: [id], onDelete: Cascade)

  @@index([originalRecipeId], map: "messages_original_recipe_id")
  @@index([recipeId], map: "messages_recipe_id")
  @@map("Messages")
}

model AssistantMessage {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  role      String   @db.VarChar(255)
  content   String?
  name      String?
  json      Json
  recipeId  String?  @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  user      User     @relation("AssistantMessages_userIdToUsers", fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe?  @relation("AssistantMessages_recipeIdToRecipes", fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("AssistantMessages")
}

model ProfileItem {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  recipeId   String?  @db.Uuid
  labelId    String?  @db.Uuid
  title      String   @db.VarChar(255)
  type       String   @db.VarChar(255)
  visibility String   @db.VarChar(255)
  order      Int
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)
  label      Label?   @relation(fields: [labelId], references: [id], onDelete: Cascade)
  recipe     Recipe?  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ProfileItems")
}

model RecipeImage {
  id        String   @id @default(uuid()) @db.Uuid
  recipeId  String   @db.Uuid
  imageId   String   @db.Uuid
  order     Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId], map: "recipe__images_recipe_id")
  @@index([imageId], map: "recipe__images_image_id")
  @@map("Recipe_Images")
}

model RecipeLabel {
  id        String   @id @default(uuid()) @db.Uuid
  recipeId  String   @db.Uuid
  labelId   String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([labelId, recipeId], map: "Recipe_Labels_labelId_recipeId_uk")
  @@unique([recipeId, labelId])
  @@index([labelId], map: "recipe__labels_label_id")
  @@index([recipeId], map: "recipe__labels_recipe_id")
  @@map("Recipe_Labels")
}

model Recipe {
  id                String             @id @default(uuid()) @db.Uuid
  userId            String             @db.Uuid
  fromUserId        String?            @db.Uuid
  title             String
  description       String             @default("")
  yield             String             @default("")
  activeTime        String             @default("")
  totalTime         String             @default("")
  source            String             @default("")
  url               String             @default("")
  notes             String             @default("")
  ingredients       String             @default("")
  instructions      String             @default("")
  folder            String             @db.VarChar(255)
  createdAt         DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime           @updatedAt @db.Timestamptz(6)
  indexedAt         DateTime?          @db.Timestamptz(6)
  rating            Int?
  mealPlanItems     MealPlanItem[]
  originalRecipe    Message[]          @relation("Messages_originalRecipeIdToRecipes")
  messages          Message[]          @relation("Messages_recipeIdToRecipes")
  assistantMessages AssistantMessage[] @relation("AssistantMessages_recipeIdToRecipes")
  profileItems      ProfileItem[]
  recipeImages      RecipeImage[]
  recipeLabels      RecipeLabel[]
  fromUser          User?              @relation("Recipes_fromUserIdToUsers", fields: [fromUserId], references: [id])
  user              User               @relation("Recipes_userIdToUsers", fields: [userId], references: [id], onDelete: Cascade)
  shoppingListItems ShoppingListItem[]

  @@index([userId], map: "recipes_user_id")
  @@index([fromUserId], map: "recipes_from_user_id")
  @@map("Recipes")
}

model Session {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  type      String?   @db.VarChar(255)
  token     String?   @db.VarChar(255)
  expires   DateTime? @db.Timestamptz(6)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Sessions")
}

model ShoppingListItem {
  id             String        @id @default(uuid()) @db.Uuid
  userId         String        @db.Uuid
  shoppingListId String        @db.Uuid
  mealPlanItemId String?       @db.Uuid
  recipeId       String?       @db.Uuid
  title          String
  completed      Boolean
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime      @updatedAt @db.Timestamptz(6)
  mealPlanItem   MealPlanItem? @relation(fields: [mealPlanItemId], references: [id], onDelete: Cascade)
  recipe         Recipe?       @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  shoppingList   ShoppingList  @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([recipeId], map: "shopping_list_items_recipe_id")
  @@index([shoppingListId], map: "shopping_list_items_shopping_list_id")
  @@map("ShoppingListItems")
}

model ShoppingListCollaborator {
  id             String       @id @default(uuid()) @db.Uuid
  shoppingListId String       @db.Uuid
  userId         String       @db.Uuid
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime     @updatedAt @db.Timestamptz(6)
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([shoppingListId, userId])
  @@map("ShoppingList_Collaborators")
}

model ShoppingList {
  id                String                     @id @default(uuid()) @db.Uuid
  userId            String                     @db.Uuid
  title             String?
  createdAt         DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime                   @updatedAt @db.Timestamptz(6)
  items             ShoppingListItem[]
  collaboratorUsers ShoppingListCollaborator[]
  user              User                       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ShoppingLists")
}

model StripePayment {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String?  @db.Uuid
  amountPaid      Int
  customerId      String   @db.VarChar(255)
  customerEmail   String?  @db.VarChar(255)
  paymentIntentId String   @unique @db.VarChar(255)
  subscriptionId  String?  @db.VarChar(255)
  invoiceBlob     Json
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("StripePayments")
}

model UserSubscription {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  name      String?   @db.VarChar(255)
  expires   DateTime? @db.Timestamptz(6)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserSubscriptions")
}

model UserProfileImage {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  imageId   String   @db.Uuid
  order     Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("User_Profile_Images")
}

model User {
  id                        String                     @id @default(uuid()) @db.Uuid
  name                      String?
  email                     String?                    @unique(map: "Users_email_uk")
  passwordHash              String?
  passwordSalt              String?
  passwordVersion           Int?
  lastLogin                 DateTime?                  @db.Timestamptz(6)
  createdAt                 DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime                   @updatedAt @db.Timestamptz(6)
  stripeCustomerId          String?                    @unique @db.VarChar(255)
  handle                    String?                    @unique(map: "Users_handle_uk") @db.VarChar(255)
  enableProfile             Boolean                    @default(false)
  profileVisibility         String?                    @db.VarChar(255)
  preferences               Json?
  fcmTokens                 FCMToken[]
  incomingFriendships       Friendship[]               @relation("Friendships_friendIdToUsers")
  outgoingFriendships       Friendship[]               @relation("Friendships_userIdToUsers")
  images                    Image[]
  labels                    Label[]
  labelGroups               LabelGroup[]
  mealPlanItems             MealPlanItem[]
  mealPlanCollaborators     MealPlanCollaborator[]
  mealPlans                 MealPlan[]
  incomingMessages          Message[]                  @relation("Messages_fromUserIdToUsers")
  outgoingMessages          Message[]                  @relation("Messages_toUserIdToUsers")
  assistantMessages         AssistantMessage[]         @relation("AssistantMessages_userIdToUsers")
  profileItems              ProfileItem[]
  outgoingRecipes           Recipe[]                   @relation("Recipes_fromUserIdToUsers")
  recipes                   Recipe[]                   @relation("Recipes_userIdToUsers")
  sessions                  Session[]
  shoppingListItems         ShoppingListItem[]
  shoppingListCollaborators ShoppingListCollaborator[]
  shoppingLists             ShoppingList[]
  stripePayments            StripePayment[]
  subscriptions             UserSubscription[]
  profileImages             UserProfileImage[]

  @@map("Users")
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}
